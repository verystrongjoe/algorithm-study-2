import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

/**
 * 
 * 
 * 
 *  시간 제한	메모리 제한
		1.0 초	512 MB
		문제
		예찬이는 다음과 같은 암호를 사용하고 있다. 이 암호는 영어 알파벳으로 이루어진 문자열을 대상으로 하며, 문자열의 각각의 알파벳을 알파벳 순으로 3순서 뒤의 알파벳으로 바꾼다. 이렇게 하면 알파벳 a는 d로, b는 e로, c는 f로, ..., w는 z로 암호화된다. 또 x는 다시 a로, y는 b로, z는 c로 암호화하기로 하였다.
		
		하지만 예찬이는 이 암호화 방법이 보안에 상당히 취약하다는 사실을 깨달았고, 암호화 과정에 다음과 같은 과정을 추가하였다. 원래 암호화 알고리즘으로 암호화된 문자열을 한 줄에 5글자씩 쓴 뒤, 5개의 세로줄을 각각 위에서 아래로 읽어서 쓰는 것이다. 이렇게 암호화를 하면 원래 문자열과 길이가 같은 암호문이 나오게 된다.
		
		이렇게 만들고 보니 예찬이 혼자서 손으로 암호를 풀기는 쉽지 않게 되었다. 예찬이를 도와 암호를 빠르게 푸는 프로그램을 작성해 주자.
		
		입력
		입력에는 영어 알파벳 소문자로만 구성된 하나의 문자열이 들어온다. 이 문자열은 영어 알파벳 소문자로만 이루어진 문자열이 암호화된 암호문이다. 문자열의 길이는 1 이상 300,000 이하이다.
		
		출력
		암호화되기 이전의 문자열을 알아내어 출력한다.
		
		힌트
		입력 예제
		
		wfreqkuguhhhrvwlnhfvh
		출력 예제
		
		thesecretcodeisbroken
		예제 설명
		
		암호화 과정은 다음과 같다.
		
		평문
		
		thesecretcodeisbroken
		알파벳을 세 글자 뒤로 바꾸는 과정 이후
		
		wkhvhfuhwfrghlveurnhq
		알파벳을 다섯 글자씩 끊으면
		
		wkhvh
		fuhwf
		rghlv
		eurnh
		q
		첫 번째 세로줄은 wfreq, 두 번째 세로줄은 kugu, ... 다섯 번째 세로줄은 hfvh가 되어 결과로 나오는 암호문은 다음과 같이 된다.
		
		wfreqkuguhhhrvwlnhfvh
		
		 
 *
 */
public class source {

	public static void main(String[] args) throws NumberFormatException, IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String encrypt = br.readLine();
		char[] decrypt = new char[encrypt.length()];
		char[] encryptChars = encrypt.toCharArray();
		
		int totalLines = encrypt.length() / 5;
		int lastLineItems = encrypt.length() % 5;
		if(lastLineItems != 0 ) totalLines++;
		
		for(int i = 0 ; i < encrypt.length(); i++) {
			int d = encryptChars[i] - 'a' ;
			if(d < 0) encryptChars[i] = (char) ( 'z' - (d-1)); 
		}
		
		
		int l = 0, r = 0, p, i = 0;
		
		do {
			p = (l++) * 5 + (r++);
			
			decrypt[p] = encryptChars[i];
		
			if(l == totalLines ) {
				
				l = 0;
				
				if( lastLineItems != 0 && r > lastLineItems) {
					totalLines --;
				}
			}
			
			if(  lastLineItems != 0 && r < lastLineItems   )
				
			
			
			
		} while(totalLines > 0 && lastLineItems > 0);
		
		
		
		
		
		
		
		for(int i = 0 ; i < totalLines; i ++ ) {
			for(int j = 0 ; j < 5; j ++ ) {
				if(lastLineItems != 0 && j <  lastLineItems ) {
					decrypt[i * 5 + j] = 
				}
				
 			}
		}
			int l = i / 5;
			int r = i % 5;		
			
		
		System.out.println(encryptString);
		
	}

}
