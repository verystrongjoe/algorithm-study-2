import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class source {

	/***
	 * 
	 * 시간 제한	메모리 제한
		1.0 초	512 MB
		
		https://ko.wikipedia.org/wiki/%EC%A0%90%ED%99%94%EC%8B%9D#.EC.98.88_:_.ED.94.BC.EB.B3.B4.EB.82.98.EC.B9.98_.EC.88.98.EC.97.B4
		위에서 선형대수학쪽을 찾아보자..
		
		아래 이미지 같은 식이 필요
		https://wikimedia.org/api/rest_v1/media/math/render/svg/5879a7048941b46221c15aa89978ca53c8964cc7
		
		
		문제
		최대 2 칸 까지 오를 수 있을 때 오르는 방법의 가짓수를 생각해 보자.
		
		아래 그림은 n 이 4 인 경우의 예 이다.
		
		stair
		
		1 - 2 - 3 - 4
		1 - 2 - 4
		1 - 3 - 4
		2 - 3 - 4
		2 - 4
		총 5가지 경우가 존재한다.
		
		그렇다면 계단의 수가 n개일 때는 경우의 수가 몇가지 존재할까? 답이 커질 수 있으므로 답을 1,000,000,007로 나눈 나머지를 출력한다.
		
		입력
		입력의 첫 줄은 계단의 갯수 (1 <= N <= 1,000,000,000)이 주어진다.
		
		출력
		계단 N개를 오를 수 있는 경우의 수를 10억 7로 나눈 나머지를 출력한다.
	 * 
	 * 
	 */
	
	final static int MOD =  1000000007;

	public static void main(String[] args) throws NumberFormatException, IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		
		System.out.println(fib(N));
	}

	private static  double  fib(double n) {
		double  v = Math.sqrt(5.0);
		
		double first = (1/v);
		double second =  	Math.pow( ( 1 +v) / 2.0 ,n )  -    Math.pow( ( 1 - v) / 2.0 ,n );
		
		return first * (second % MOD);
	}
	
}
