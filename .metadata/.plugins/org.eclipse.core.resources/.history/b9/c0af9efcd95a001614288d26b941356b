import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;

public class source {

	/****
	 * 
	 * 
	 * 시간 제한	메모리 제한
		3.0 초	512 MB
		문제
		N개의 정점과 M개의 간선으로 이루어진 양방향 그래프가 주어진다. 1번 정점에서 N번 정점까지의 K번째 최단경로를 구하여라. 같은 거리로 N번 정점에 도달해도 중간에 이동하는 방법이 다르면 서로 다른 경로로 간주하며 같은 간선을 여러 번 이용할 수도 있다. 만약 1번 정점에서 N번 정점까지의 경로가 존재하지 않으면 -1을 출력한다.
		
		입력
		첫 번째 줄에 정점의 개수 N과 간선의 개수 M, 그리고 K가 주어진다(1<=N<=100,000, 1<=M<=500,000, 1<=K<=10). 두 번째 줄부터 M개의 줄에 걸쳐 간선의 정보가 입력된다. 간선의 정보는 x, y, z꼴로 주어지며 x에서 y로 가는데, 혹은 y에서 x로 가는데 z의 거리를 가지고 있다는 뜻이다. 간선의 길이는 100,000이하의 숫자이다.
		
		출력
		첫 번째 줄에 1번 정점에서 N번 정점으로의 최단거리를 출력한다. 만약, 경로가 존재하지 않으면 -1을 출력한다.
		
		힌트
		입력 예제
		
		5 7 2
		1 2 2
		1 3 5
		1 4 1
		2 3 2
		3 4 5
		2 5 6
		3 5 1
		출력 예제
		
		6
	 * @throws IOException 
	 * 
	 * 
	 * 
	 * 
	 */
	public static void main(String[] args) throws IOException {
		
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

		String[] splits = br.readLine().split(" ");
		int N = Integer.parseInt(splits[0]);
		int M = Integer.parseInt(splits[1]);
		int K = Integer.parseInt(splits[2]);
		
		List<node>[] list = new ArrayList[N];
		
		for(int i = 0; i < M; i++) {
			
		}
			
			
	}

}

class node {
	int n;
	int w;
}
