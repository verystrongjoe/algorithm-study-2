import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Stack;

/***
 *
 * 
 * 
 * 
 * 
	시간 제한	메모리 제한
	1.0 초	512 MB
	문제
	2차원 평면에 N개의 점이 주어졌을 때, 이들 중 몇 개의 점을 골라 볼록 다각형을 만드는데, 나머지 모든 점을 내부에 포함하도록 할 수 있다. 이를 볼록 껍질 (CONVEX HULL) 이라 한다.
	 N개의 점이 주어질 때 볼록껍질을 이루는 점의 개수를 구하여라. 만약 볼록껍질을 이루는 한 선분에 3개 이상의 점이 포함된 경우, 양 끝점만을 센다.

		입력
		첫째 줄에 점의 개수 N이 주어진다(3<=N<=100000). 두 번째 줄부터 N개의 줄에 걸쳐 각 점의 x, y좌표가 주어진다. 좌표는 정수로 주어지며 절대값은 40000을 넘지 않는다. 각 점은 모두 다른 위치에 있으며 모든 점이 한 직선위에 있는 경우는 없다.

		출력
		첫째 줄에 볼록껍질을 이루는 점의 개수를 출력한다.

		힌트
		입력 예제

		8
		1 1
		1 2
		1 3
		2 1
		2 2
		2 3
		3 1
		3 2
		출력 예제

		5
 * @throws IOException 
 * @throws NumberFormatException 
 */
public class source {
	public static double minX = Double.MAX_VALUE;
	public static double minY = Double.MAX_VALUE;
	public static int minXi =  Integer.MAX_VALUE;
	public static int N;
	public static List<Point>ps;
	public static Stack<Point> s = new Stack<Point>();

	public static void main(String[] args) throws NumberFormatException, IOException {

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		ps = new ArrayList<Point>();

		for(int i = 0; i < N; i++) {
			String[] splits = br.readLine().split(" ");
			ps.add( new Point( Double.parseDouble(splits[0]), Double.parseDouble(splits[1]) ));
			double px =((Point)ps.get(i)).x;
			if(minX  > px)  { 
				minX = px;
				minXi= i;
			}
		}
		Point minX = ps.get(minXi);
		ps.remove(minXi);
		Collections.sort(ps, new PointComp(minX) );
		
		s.add(ps.get(ps.size()-1));
		s.add(minX);
		
		for(int i =0; i <N-1; i++) {
			while( PointComp.calExpr( s.elementAt(s.size() -2 ), s.lastElement(), ps.get(i) ) < 0  )  {
				s.pop();
			}
			s.add(ps.get(i));
		}
		System.out.printf("%d", s.size());
		
	}

}

class PointComp implements Comparator<Point> {
	
	Point minXi;
	
	public PointComp(Point p) {
		this.minXi = p;
	}

	public static  double calExpr(Point i, Point j, Point k) {
		double area1 = i.x*j.y + j.x*k.y + k.x* i.y;
		double area2 = i.y*j.x + j.y*k.x + k.y* i.x;
		return area1-area2;
	}
	
	@Override
	public int compare(Point p1, Point p2) {
		if(calExpr(p1, minXi, p2) > 0) return 1;
		else return -1;
	}
}

class Point  {
	double x,y;
	
	public Point(double x, double y) {
		this.x = x;
		this.y = y;
	}
	public double getDistance(Point i, Point j) {
		double dx = i.x-j.x;
		double dy = i.y-j.y;
		return dx*dx + dy*dy;
	}
}