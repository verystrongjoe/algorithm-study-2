import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class source {

	/***
	 * 
	 * 시간 제한	메모리 제한
		1.0 초	512 MB
		
		
		문제
		최대 2 칸 까지 오를 수 있을 때 오르는 방법의 가짓수를 생각해 보자.
		
		아래 그림은 n 이 4 인 경우의 예 이다.
		
		stair
		
		1 - 2 - 3 - 4
		1 - 2 - 4
		1 - 3 - 4
		2 - 3 - 4
		2 - 4
		총 5가지 경우가 존재한다.
		
		그렇다면 계단의 수가 n개일 때는 경우의 수가 몇가지 존재할까? 답이 커질 수 있으므로 답을 1,000,000,007로 나눈 나머지를 출력한다.
		
		입력
		입력의 첫 줄은 계단의 갯수 (1 <= N <= 1,000,000,000)이 주어진다.
		
		출력
		계단 N개를 오를 수 있는 경우의 수를 10억 7로 나눈 나머지를 출력한다.
	 * 
	 * 
	 */
	public static void main(String[] args) throws NumberFormatException, IOException {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		
		int[] D = new int[N+1];
		
		D[1] = 1;
		D[2] = 2;
		
		for(int i = 3 ; i <= N; i++ ) {
			D[i] = D[i-1] + D[i-2]; 
		}
		
		System.out.println(D[N]);
		
	}
}
